name: Generate Threat Hunt Report

on:
  issues:
    types: [labeled]

permissions:
  issues: read
  contents: write
  pull-requests: write
  actions: read
  metadata: read

jobs:
  generate-report:
    runs-on: ubuntu-latest
    if: contains(github.event.label.name, 'completed')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract Issue Data
      id: extract-data
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const issue = context.payload.issue;
          const issueNumber = issue.number;
          const issueTitle = issue.title;
          const issueBody = issue.body || '';
          const issueAuthor = issue.user.login;
          const issueCreated = new Date(issue.created_at).toISOString().split('T')[0];
          const issueUpdated = new Date(issue.updated_at).toISOString().split('T')[0];
          
          // Extract hunt name from title
          const huntName = issueTitle.replace(/^\[.*?\]\s*/, '').trim();
          
          // Determine hunt type
          let huntType = 'General';
          if (issueTitle.includes('[HYPOTHESIS-HUNT]')) {
            huntType = 'Hypothesis-Driven';
          } else if (issueTitle.includes('[BASELINE-HUNT]')) {
            huntType = 'Baseline Analysis';
          } else if (issueTitle.includes('[HUNT]')) {
            huntType = 'General Hunt';
          }
          
          // Helper functions
          function extractFieldValue(body, fieldName) {
            const regex = new RegExp(`### ${fieldName.replace(/[.*+?^${}()|[\]\\]/g, '\\    - name: Extract Issue Data
      id: extract-data
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = context.payload.issue;
          const issueNumber = issue.number;
          const issueTitle = issue.title;
          const issueBody = issue.body || '';
          const issueAuthor = issue.user.login;
          const issueCreated = new Date(issue.created_at).toISOString().split('T')[0];
          const issueUpdated = new Date(issue.updated_at).toISOString().split('T')[0];
          
          // Extract hunt name from title
          const huntName = issueTitle.replace(/^\[.*?\]\s*/, '').trim();
          
          // Determine hunt type
          let huntType = 'General';
          if (issueTitle.includes('[HYPOTHESIS-HUNT]')) {
            huntType = 'Hypothesis-Driven';
          } else if (issueTitle.includes('[BASELINE-HUNT]')) {
            huntType = 'Baseline Analysis';
          } else if (issueTitle.includes('[HUNT]')) {
            huntType = 'General Hunt';
          }
          
          // Helper functions
          function extractFieldValue(body, fieldName) {
            const regex = new RegExp(`### ${fieldName.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\s*\\n([\\s\\S]*?)(?=\\n### |\\n---|\n## |$)`, 'i');
            const match = body.match(regex);
            return match ? match[1].trim() : '';
          }
          
          function extractDropdownValue(body, fieldName) {
            const content = extractFieldValue(body, fieldName);
            const lines = content.split('\n').map(line => line.trim()).filter(line => line && !line.startsWith('-'));
            return lines[0] || 'Not specified';
          }
          
          function extractCheckboxValues(body, fieldName) {
            const content = extractFieldValue(body, fieldName);
            const checkedItems = content.match(/- \[x\] (.+)/gi);
            return checkedItems ? checkedItems.map(item => item.replace(/- \[x\] /i, '').trim()) : [];
          }
          
          // Extract data
          const extractedData = {
            huntName,
            huntType,
            issueNumber,
            issueAuthor,
            issueCreated,
            issueUpdated,
            priority: extractDropdownValue(issueBody, 'Hunt Priority') || extractDropdownValue(issueBody, 'Priority Level'),
            duration: extractDropdownValue(issueBody, 'Estimated Hunt Duration') || extractDropdownValue(issueBody, 'Expected Hunt Duration'),
            dataSources: extractCheckboxValues(issueBody, 'Required Data Sources') || extractCheckboxValues(issueBody, 'Required Data Sources for Baseline'),
            additionalContext: extractFieldValue(issueBody, 'Additional Context') || extractFieldValue(issueBody, 'Supporting Intelligence & Context')
          };
          
          // Hunt-specific data
          if (huntType === 'Hypothesis-Driven') {
            extractedData.hypothesis = extractFieldValue(issueBody, 'Primary Hypothesis Statement');
            extractedData.rationale = extractFieldValue(issueBody, 'Hypothesis Rationale');
            extractedData.nullHypothesis = extractFieldValue(issueBody, 'Null Hypothesis');
            extractedData.observableBehaviors = extractFieldValue(issueBody, 'Observable Behaviors & Artifacts');
            extractedData.mitreTactic = extractDropdownValue(issueBody, 'Primary MITRE ATT&CK Tactic');
            extractedData.mitreTechniques = extractFieldValue(issueBody, 'Specific MITRE ATT&CK Techniques');
            extractedData.testingApproach = extractFieldValue(issueBody, 'Hypothesis Testing Approach');
            extractedData.predictions = extractFieldValue(issueBody, 'Testable Predictions');
            extractedData.confirmedActions = extractFieldValue(issueBody, 'Actions if Hypothesis CONFIRMED');
            extractedData.rejectedActions = extractFieldValue(issueBody, 'Actions if Hypothesis REJECTED');
          } else if (huntType === 'Baseline Analysis') {
            extractedData.baselineType = extractDropdownValue(issueBody, 'Baseline Hunt Type');
            extractedData.objective = extractFieldValue(issueBody, 'Baseline Objective');
            extractedData.scopeType = extractDropdownValue(issueBody, 'Baseline Scope Type');
            extractedData.scopeDetails = extractFieldValue(issueBody, 'Detailed Scope Definition');
            extractedData.expectedPatterns = extractFieldValue(issueBody, 'Expected Normal Patterns');
            extractedData.statisticalApproach = extractDropdownValue(issueBody, 'Statistical Analysis Approach');
            extractedData.metrics = extractFieldValue(issueBody, 'Key Baseline Metrics');
            extractedData.normalRanges = extractFieldValue(issueBody, 'Normal Range Definitions');
            extractedData.validationProcess = extractFieldValue(issueBody, 'Baseline Validation Process');
          } else {
            extractedData.huntHypothesis = extractFieldValue(issueBody, 'Hunt Hypothesis');
            extractedData.scope = extractFieldValue(issueBody, 'Asset Scope & Target Profile') || extractFieldValue(issueBody, 'Scope');
            extractedData.methodology = extractFieldValue(issueBody, 'Hunt Methodology');
            extractedData.expectedOutcomes = extractFieldValue(issueBody, 'Expected Outcomes');
          }
          
          return extractedData;')}\\s*\\n([\\s\\S]*?)(?=\\n### |\\n---|\n## |$)`, 'i');
            const match = body.match(regex);
            return match ? match[1].trim() : '';
          }
          
          function extractDropdownValue(body, fieldName) {
            const content = extractFieldValue(body, fieldName);
            const lines = content.split('\n').map(line => line.trim()).filter(line => line && !line.startsWith('-'));
            return lines[0] || 'Not specified';
          }
          
          function extractCheckboxValues(body, fieldName) {
            const content = extractFieldValue(body, fieldName);
            const checkedItems = content.match(/- \[x\] (.+)/gi);
            return checkedItems ? checkedItems.map(item => item.replace(/- \[x\] /i, '').trim()) : [];
          }
          
          // Extract data
          const extractedData = {
            huntName,
            huntType,
            issueNumber,
            issueAuthor,
            issueCreated,
            issueUpdated,
            priority: extractDropdownValue(issueBody, 'Hunt Priority') || extractDropdownValue(issueBody, 'Priority Level'),
            duration: extractDropdownValue(issueBody, 'Estimated Hunt Duration') || extractDropdownValue(issueBody, 'Expected Hunt Duration'),
            dataSources: extractCheckboxValues(issueBody, 'Required Data Sources') || extractCheckboxValues(issueBody, 'Required Data Sources for Baseline'),
            additionalContext: extractFieldValue(issueBody, 'Additional Context') || extractFieldValue(issueBody, 'Supporting Intelligence & Context')
          };
          
          // Hunt-specific data
          if (huntType === 'Hypothesis-Driven') {
            extractedData.hypothesis = extractFieldValue(issueBody, 'Primary Hypothesis Statement');
            extractedData.rationale = extractFieldValue(issueBody, 'Hypothesis Rationale');
            extractedData.nullHypothesis = extractFieldValue(issueBody, 'Null Hypothesis');
            extractedData.observableBehaviors = extractFieldValue(issueBody, 'Observable Behaviors & Artifacts');
            extractedData.mitreTactic = extractDropdownValue(issueBody, 'Primary MITRE ATT&CK Tactic');
            extractedData.mitreTechniques = extractFieldValue(issueBody, 'Specific MITRE ATT&CK Techniques');
            extractedData.testingApproach = extractFieldValue(issueBody, 'Hypothesis Testing Approach');
            extractedData.predictions = extractFieldValue(issueBody, 'Testable Predictions');
            extractedData.confirmedActions = extractFieldValue(issueBody, 'Actions if Hypothesis CONFIRMED');
            extractedData.rejectedActions = extractFieldValue(issueBody, 'Actions if Hypothesis REJECTED');
          } else if (huntType === 'Baseline Analysis') {
            extractedData.baselineType = extractDropdownValue(issueBody, 'Baseline Hunt Type');
            extractedData.objective = extractFieldValue(issueBody, 'Baseline Objective');
            extractedData.scopeType = extractDropdownValue(issueBody, 'Baseline Scope Type');
            extractedData.scopeDetails = extractFieldValue(issueBody, 'Detailed Scope Definition');
            extractedData.expectedPatterns = extractFieldValue(issueBody, 'Expected Normal Patterns');
            extractedData.statisticalApproach = extractDropdownValue(issueBody, 'Statistical Analysis Approach');
            extractedData.metrics = extractFieldValue(issueBody, 'Key Baseline Metrics');
            extractedData.normalRanges = extractFieldValue(issueBody, 'Normal Range Definitions');
            extractedData.validationProcess = extractFieldValue(issueBody, 'Baseline Validation Process');
          } else {
            extractedData.huntHypothesis = extractFieldValue(issueBody, 'Hunt Hypothesis');
            extractedData.scope = extractFieldValue(issueBody, 'Asset Scope & Target Profile') || extractFieldValue(issueBody, 'Scope');
            extractedData.methodology = extractFieldValue(issueBody, 'Hunt Methodology');
            extractedData.expectedOutcomes = extractFieldValue(issueBody, 'Expected Outcomes');
          }
          
          return JSON.stringify(extractedData);

    - name: Get Hunter Notes
      id: get-notes
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.issue.number
          });
          
          let hunterNotes = '';
          if (comments.data.length > 0) {
            hunterNotes = comments.data.map(comment => {
              const author = comment.user.login;
              const date = new Date(comment.created_at).toISOString().split('T')[0];
              const body = comment.body;
              return `**${author}** (${date}):\n\n${body}`;
            }).join('\n\n---\n\n');
          } else {
            hunterNotes = '*No comments were added during the hunt.*';
          }
          
          return hunterNotes;

    - name: Create Report Content
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          // Get data from previous steps
          const issue = context.payload.issue;
          const extractedData = JSON.parse('${{ steps.extract-data.outputs.result }}');
          const hunterNotes = '${{ steps.get-notes.outputs.result }}';
          
          // Create hunt-specific section
          let huntSpecificSection = '';
          
          if (extractedData.huntType === 'Hypothesis-Driven') {
            const sections = [
              '## Hypothesis-Driven Hunt Details',
              '',
              '### Primary Hypothesis',
              extractedData.hypothesis || '*Not specified*',
              '',
              '### Hypothesis Rationale',
              extractedData.rationale || '*Not specified*',
              '',
              '### Null Hypothesis',
              extractedData.nullHypothesis || '*Not specified*',
              '',
              '### Observable Behaviors & Artifacts',
              extractedData.observableBehaviors || '*Not specified*',
              '',
              '### MITRE ATT&CK Mapping',
              '**Primary Tactic:** ' + (extractedData.mitreTactic || 'Not specified'),
              '',
              '**Specific Techniques:**',
              extractedData.mitreTechniques || '*Not specified*',
              '',
              '### Testing Methodology',
              extractedData.testingApproach || '*Not specified*',
              '',
              '### Testable Predictions',
              extractedData.predictions || '*Not specified*',
              '',
              '### Response Planning',
              '',
              '**Actions if Hypothesis CONFIRMED:**',
              extractedData.confirmedActions || '*Not specified*',
              '',
              '**Actions if Hypothesis REJECTED:**',
              extractedData.rejectedActions || '*Not specified*'
            ];
            huntSpecificSection = sections.join('\n');
          } else if (extractedData.huntType === 'Baseline Analysis') {
            const sections = [
              '## Baseline Analysis Hunt Details',
              '',
              '### Baseline Type',
              extractedData.baselineType || 'Not specified',
              '',
              '### Baseline Objective',
              extractedData.objective || '*Not specified*',
              '',
              '### Scope Definition',
              '**Scope Type:** ' + (extractedData.scopeType || 'Not specified'),
              '',
              '**Detailed Scope:**',
              extractedData.scopeDetails || '*Not specified*',
              '',
              '### Expected Normal Patterns',
              extractedData.expectedPatterns || '*Not specified*',
              '',
              '### Statistical Analysis Approach',
              extractedData.statisticalApproach || 'Not specified',
              '',
              '### Key Baseline Metrics',
              extractedData.metrics || '*Not specified*',
              '',
              '### Normal Range Definitions',
              extractedData.normalRanges || '*Not specified*',
              '',
              '### Validation Process',
              extractedData.validationProcess || '*Not specified*'
            ];
            huntSpecificSection = sections.join('\n');
          } else {
            const sections = [
              '## General Hunt Details',
              '',
              '### Hunt Hypothesis/Objective',
              extractedData.huntHypothesis || '*Not specified*',
              '',
              '### Scope',
              extractedData.scope || '*Not specified*',
              '',
              '### Methodology',
              extractedData.methodology || '*Not specified*',
              '',
              '### Expected Outcomes',
              extractedData.expectedOutcomes || '*Not specified*'
            ];
            huntSpecificSection = sections.join('\n');
          }
          
          // Create data sources section
          const dataSourcesSection = extractedData.dataSources && extractedData.dataSources.length > 0 
            ? extractedData.dataSources.map(source => `- ${source}`).join('\n')
            : '*No specific data sources were documented.*';
          
          // Build the complete report
          const reportSections = [
            '# Threat Hunt Report: ' + extractedData.huntName,
            '',
            '**Hunt ID:** TH-' + extractedData.issueCreated.replace(/-/g, '') + '-' + extractedData.issueNumber.toString().padStart(3, '0'),
            '**Hunt Type:** ' + extractedData.huntType,
            '**Issue Number:** [#' + extractedData.issueNumber + '](' + issue.html_url + ')',
            '**Hunt Lead:** ' + extractedData.issueAuthor,
            '**Date Created:** ' + extractedData.issueCreated,
            '**Date Completed:** ' + extractedData.issueUpdated,
            '**Priority:** ' + (extractedData.priority || 'Not specified'),
            '**Estimated Duration:** ' + (extractedData.duration || 'Not specified'),
            '',
            '---',
            '',
            '## Executive Summary',
            '',
            'This report documents the completion of the "' + extractedData.huntName + '" threat hunt, conducted as part of our proactive threat hunting program. The hunt was initiated on ' + extractedData.issueCreated + ' and completed on ' + extractedData.issueUpdated + '.',
            '',
            huntSpecificSection,
            '',
            '## Data Sources Utilized',
            '',
            dataSourcesSection
          ];
          
          // Add additional context if available
          if (extractedData.additionalContext) {
            reportSections.push('');
            reportSections.push('## Additional Context & Considerations');
            reportSections.push('');
            reportSections.push(extractedData.additionalContext);
          }
          
          // Add remaining sections
          const remainingSections = [
            '',
            '## Hunter Notes',
            '',
            'The following section contains comments, observations, and notes from the hunting team during the course of this investigation:',
            '',
            hunterNotes,
            '',
            '---',
            '',
            '## Findings & Results',
            '',
            '> **Note:** This section should be manually updated with actual hunt findings, evidence, and conclusions.',
            '',
            '### Key Findings',
            '- [ ] **Finding 1:** [Description of finding]',
            '  - **Evidence:** [Supporting evidence]',
            '  - **Impact:** [Assessment of impact]',
            '  - **Confidence:** [High/Medium/Low]',
            '',
            '### Evidence Collected',
            '- [ ] [Evidence item 1 - file paths, logs, screenshots]',
            '- [ ] [Evidence item 2 - network captures, memory dumps]',
            '',
            '### Indicators of Compromise (IOCs)',
            '- [ ] **IP Addresses:** [List any malicious or suspicious IPs]',
            '- [ ] **Domains:** [List any malicious or suspicious domains]',
            '- [ ] **File Hashes:** [List any malicious file hashes]',
            '',
            '## Hunt Results & Conclusions',
            '',
            '### Hunt Outcome',
            '- [ ] **Successful** - Hunt objectives fully met',
            '- [ ] **Partially Successful** - Some objectives met',
            '- [ ] **Inconclusive** - Unable to reach definitive conclusions',
            '- [ ] **No Findings** - No suspicious activity detected',
            '',
            '### Risk Assessment',
            '- [ ] **No Risk Identified** - No malicious activity found',
            '- [ ] **Low Risk** - Minor security gaps identified',
            '- [ ] **Medium Risk** - Moderate security concerns',
            '- [ ] **High Risk** - Significant security issues',
            '- [ ] **Critical Risk** - Active compromise detected',
            '',
            '## Recommendations & Next Steps',
            '',
            '### Immediate Actions (0-24 hours)',
            '- [ ] [Urgent security action item 1]',
            '- [ ] [Evidence preservation tasks]',
            '',
            '### Short-term Actions (1-7 days)',
            '- [ ] [Investigation expansion or validation]',
            '- [ ] [Security control implementations]',
            '',
            '### Long-term Actions (1+ weeks)',
            '- [ ] [Strategic security improvements]',
            '- [ ] [Policy or procedure updates]',
            '',
            '## Detection & Response Improvements',
            '',
            '### New Detection Rules Created',
            '- [ ] **Rule 1:** [Description and purpose]',
            '',
            '### Enhanced Monitoring',
            '- [ ] [New log source or data collection]',
            '- [ ] [Improved alerting or notification]',
            '',
            '## Lessons Learned',
            '',
            '### What Worked Well',
            '- [Effective hunting technique or approach]',
            '',
            '### Areas for Improvement',
            '- [Data gap or limitation identified]',
            '',
            '### Future Hunt Recommendations',
            '- [Suggestion for follow-up hunts]',
            '',
            '## Hunt Metrics & Performance',
            '',
            '- **Total Hunt Duration:** [X hours/days]',
            '- **Systems Examined:** [X endpoints/servers]',
            '- **Queries Executed:** [X searches/investigations]',
            '',
            '---',
            '',
            '## Report Metadata',
            '',
            '**Report Generated:** ' + new Date().toISOString().split('T')[0],
            '**Generated By:** GitHub Action (Threat Hunt Report Generator)',
            '**Source Issue:** [#' + extractedData.issueNumber + '](' + issue.html_url + ')',
            '',
            '---',
            '',
            '*This report was automatically generated from GitHub Issue data and hunter comments. Please review and update the Findings, Conclusions, and Recommendations sections with actual hunt results before finalizing.*'
          ];
          
          reportSections.push(...remainingSections);
          const reportContent = reportSections.join('\n');
          
          // Create reports directory and write file
          const reportsDir = 'hunt-reports';
          if (!fs.existsSync(reportsDir)) {
            fs.mkdirSync(reportsDir, { recursive: true });
          }
          
          const sanitizedHuntName = extractedData.huntName.replace(/[^a-zA-Z0-9-_]/g, '-').toLowerCase();
          const filename = `${reportsDir}/hunt-report-${extractedData.issueCreated}-${extractedData.issueNumber}-${sanitizedHuntName}.md`;
          
          fs.writeFileSync(filename, reportContent);
          console.log('Generated threat hunt report: ' + filename);
          
          core.setOutput('filename', filename);
            '  - **Evidence:** [Supporting evidence]',
            '  - **Impact:** [Assessment of impact]',
            '  - **Confidence:** [High/Medium/Low]',
            '',
            '### Evidence Collected',
            '- [ ] [Evidence item 1 - file paths, logs, screenshots]',
            '- [ ] [Evidence item 2 - network captures, memory dumps]',
            '',
            '### Indicators of Compromise (IOCs)',
            '- [ ] **IP Addresses:** [List any malicious or suspicious IPs]',
            '- [ ] **Domains:** [List any malicious or suspicious domains]',
            '- [ ] **File Hashes:** [List any malicious file hashes]',
            '',
            '## Hunt Results & Conclusions',
            '',
            '### Hunt Outcome',
            '- [ ] **Successful** - Hunt objectives fully met',
            '- [ ] **Partially Successful** - Some objectives met',
            '- [ ] **Inconclusive** - Unable to reach definitive conclusions',
            '- [ ] **No Findings** - No suspicious activity detected',
            '',
            '### Risk Assessment',
            '- [ ] **No Risk Identified** - No malicious activity found',
            '- [ ] **Low Risk** - Minor security gaps identified',
            '- [ ] **Medium Risk** - Moderate security concerns',
            '- [ ] **High Risk** - Significant security issues',
            '- [ ] **Critical Risk** - Active compromise detected',
            '',
            '## Recommendations & Next Steps',
            '',
            '### Immediate Actions (0-24 hours)',
            '- [ ] [Urgent security action item 1]',
            '- [ ] [Evidence preservation tasks]',
            '',
            '### Short-term Actions (1-7 days)',
            '- [ ] [Investigation expansion or validation]',
            '- [ ] [Security control implementations]',
            '',
            '### Long-term Actions (1+ weeks)',
            '- [ ] [Strategic security improvements]',
            '- [ ] [Policy or procedure updates]',
            '',
            '## Detection & Response Improvements',
            '',
            '### New Detection Rules Created',
            '- [ ] **Rule 1:** [Description and purpose]',
            '',
            '### Enhanced Monitoring',
            '- [ ] [New log source or data collection]',
            '- [ ] [Improved alerting or notification]',
            '',
            '## Lessons Learned',
            '',
            '### What Worked Well',
            '- [Effective hunting technique or approach]',
            '',
            '### Areas for Improvement',
            '- [Data gap or limitation identified]',
            '',
            '### Future Hunt Recommendations',
            '- [Suggestion for follow-up hunts]',
            '',
            '## Hunt Metrics & Performance',
            '',
            '- **Total Hunt Duration:** [X hours/days]',
            '- **Systems Examined:** [X endpoints/servers]',
            '- **Queries Executed:** [X searches/investigations]',
            '',
            '---',
            '',
            '## Report Metadata',
            '',
            '**Report Generated:** ' + new Date().toISOString().split('T')[0],
            '**Generated By:** GitHub Action (Threat Hunt Report Generator)',
            '**Source Issue:** [#' + extractedData.issueNumber + '](' + issue.html_url + ')',
            '',
            '---',
            '',
            '*This report was automatically generated from GitHub Issue data and hunter comments. Please review and update the Findings, Conclusions, and Recommendations sections with actual hunt results before finalizing.*'
          ];
          
          reportSections.push(...remainingSections);
          const reportContent = reportSections.join('\n');
          
          // Create reports directory and write file
          const reportsDir = 'hunt-reports';
          if (!fs.existsSync(reportsDir)) {
            fs.mkdirSync(reportsDir, { recursive: true });
          }
          
          const sanitizedHuntName = extractedData.huntName.replace(/[^a-zA-Z0-9-_]/g, '-').toLowerCase();
          const filename = `${reportsDir}/hunt-report-${extractedData.issueCreated}-${extractedData.issueNumber}-${sanitizedHuntName}.md`;
          
          fs.writeFileSync(filename, reportContent);
          console.log('Generated threat hunt report: ' + filename);
          
          core.setOutput('filename', filename);

    - name: Commit Report
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add hunt-reports/
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Generate threat hunt report for issue #${{ github.event.issue.number }}: ${{ github.event.issue.title }}"
          git push
        fi

    - name: Comment on Issue
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = context.payload.issue;
          const huntName = issue.title.replace(/^\[.*?\]\s*/, '').trim();
          const issueCreated = new Date(issue.created_at).toISOString().split('T')[0];
          const sanitizedHuntName = huntName.replace(/[^a-zA-Z0-9-_]/g, '-').toLowerCase();
          const filename = `hunt-reports/hunt-report-${issueCreated}-${issue.number}-${sanitizedHuntName}.md`;
          
          const commentBody = [
            '🎯 **Threat Hunt Report Generated**',
            '',
            'A comprehensive hunt report has been automatically generated and saved to: `' + filename + '`',
            '',
            'The report includes:',
            '- Hunt details and metadata extracted from the issue form',
            '- All comments as "Hunter Notes"',
            '- Template sections for findings and conclusions', 
            '- Recommendations and next steps',
            '',
            'Please review and update the report with actual hunt findings, evidence, and conclusions.',
            '',
            '📄 [View the generated report](' + filename + ')'
          ].join('\n');
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue.number,
            body: commentBody
          });
